;; Clojure SLIME custom stuff
(defun lein-swank ()
  "Launch swank-clojure from users homedir/.lein/bin"
  (interactive)
  (swank-clojure-init "lein")
  (let ((buffer (get-buffer-create "*clojure-swank*")))
    (flet ((display-buffer (buffer-or-name &optional not-this-window frame) nil))
          (bury-buffer buffer)
          (if (locate-dominating-file default-directory "project.clj")
            (shell-command "~/local/bin/lein swank &" buffer)
            (shell-command "~/.lein/bin/swank-clojure &" buffer))) 
    (set-process-filter (get-buffer-process buffer)
                        (lambda (process output)
                           (with-current-buffer "*clojure-swank*" (insert output))
                           (when (string-match "Connection opened on local port +\\([0-9]+\\)" output)
                             (slime-connect "localhost" (match-string 1 output))
                             (set-process-filter process nil))))
    (message "Starting swank.. ")))

(defun kill-lein-swank ()
  "Kill swank process started by lein swank."
  (interactive)
  (let ((process (get-buffer-process "*clojure-swank*")))
    (when process
      (ignore-errors (slime-quit-lisp))
      (let ((timeout 10))
        (while (and (> timeout 0)
                    (eql 'run (process-status process)))
          (sit-for 1)
          (decf timeout)))
      (ignore-errors (kill-buffer "*clojure-swank*")))))
; (defun lein-swank ()
;   (interactive)                             
;   (swank-clojure-init "lein")                                  
;   (let ((root (locate-dominating-file default-directory "project.clj")))
;     (when (not root)
;       (error "Not in a Leiningen project."))
;     (shell-command (format "cd '%s' && /Users/ilya/local/bin/lein swank &" (file-truename root)) 
;                    "*lein-swank*")
;     (set-process-filter (get-buffer-process "*lein-swank*")
;                         (lambda (process output)
;                           (when (string-match "Connection opened on" output)
;                             (print "CONNECTING TO SLIME")
;                             (slime-connect "localhost" 4005)
;                             (print "CONNECTED???")
;                             (set-process-filter process nil))))
;     (slime-redirect-inferior-output)
;     (message "Starting lein swank server...")))    


(defun swank-clojure-init (type)
  (slime-setup '(slime-repl slime-fuzzy))
  (require 'inferior-slime)
  (clojure-mode)
  (add-hook 'slime-repl-mode-hook 'clojure-mode-font-lock-setup)
  (setq inferior-lisp-program (format "~/local/bin/%s repl" type)))
    
